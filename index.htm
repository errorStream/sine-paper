<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <link rel="stylesheet" type="text/css" href="jquery-ui-1.11.4.custom/jquery-ui.min.css">
    <script type="text/javascript" src="jquery-1.12.0.min.js"></script>
    <script type="text/javascript" src="jquery-ui-1.11.4.custom/jquery-ui.min.js"></script>
    <script type="text/javascript" src="wavy-jones.js"></script>
    <script type="text/javascript">

        //var waveBlock = "<div class='oscBlock' ><div class='block-title'>No Name</div><div class='block-freq'><div class='current-value'>0</div><div class='slider freq-slider'></div></div><div class='block-type'><div class='type-icon'><svg></svg></div></div><div class='block-amp'><div class='current-value'>0</div><div class='slider amp-slider'></div></div></div>";
        var waveBlock = "<div class='oscBlock' ><div class='block-freq'><input class='current-value freq-value' value=\"0\"></input><div class='slider freq-slider'></div></div><div class='block-type'><div class='type-icon'></div></div><div class='block-amp'><input class='current-value amp-value' value=\"1\"></input><div class='slider amp-slider'></div></div></div>";


        var matrixDef = {
            width:4,
            height:4,
			cellSize:250
        }

        var matrixNodes = [];

        var oscTable = [];


        try {
            // Fix up for prefixing
            window.AudioContext = window.AudioContext||window.webkitAudioContext;
            context = new AudioContext();
        }
        catch(e) {
            alert('Web Audio API is not supported in this browser');
        }

		var oscilloscope;
		var gainNode;

        function matrixSize(){
			$("#matrix tr").css("height",matrixDef.cellSize + "px");
			$("#matrix").css("width",matrixDef.cellSize * matrixDef.width + "px");
		}

        function makeOsc(type,freq){ // types: "sine", “square”, “sawtooth”, “triangle”, or "custom"
            var osc = context.createOscillator();
            osc.frequency = freq;
            osc.type = type;
        }

        function makeMatrix(width,height){
            var table = $("#matrix")[0];
            for(y=0;y<width;y++){
                var row = table.insertRow(y);
                var rowData = [];
                for(x=0;x<height;x++){
                    var cell = row.insertCell(x);
                    rowData.push({type:"none",posx:x,posy:y,active:0});
                    cell.setAttribute("posx",x);
                    cell.setAttribute("posy",y);
                    cell.addEventListener("click",function(){
                        if(matrixNodes[this.getAttribute("posx")][this.getAttribute("posy")]["active"] == 0)
                            setCell(this);
                    });
                }
                matrixNodes.push(rowData);
            }
        }



        // place block
//        var osc = context.createOscillator();
//        osc.frequency.value = 440;

        // connect
//        osc.connect(context.destination);
//        osc.start(0);
//
//        var gain = context.createGain();
//        gain.gain.value = 100;
//        gain.connect(osc.frequency);
//
//        var osc2 = context.createOscillator();
//        osc2.frequency.value = 1;
//        osc2.type = "square";
//        osc2.connect(gain);
//        osc2.start(0);

//        var osc1 = context.createOscillator();
//        osc1.frequency.value = 500;
//        osc1.connect(context.destination);
//        var osc2 = context.createOscillator();
//        osc2.frequency.value = 505;
//        osc2.connect(context.destination);
//        osc1.start();
//        osc2.start();

        function addOsc(freq){
            var osc = context.createOscillator();
			var mul = context.createGain();
            osc.frequency.value = freq;
			mul.gain.value = 1;
			osc.connect(mul);
            mul.connect(gainNode);
            osc.start();
            oscTable.push({"osc":osc,"mul":mul});
            gainNode.gain.value = 1/(oscTable.length);
			return oscTable.length-1;
        }

//        function getCellContent(x,y){
//            return matrixNodes[x][y];
//        }


//        function setCell(x,y,type="none",data="none"){
//            var cell = getCell(x,y);
//            var cellContent = getCellContent(x,y);
//            alert("Cell type: " + cellContent.type + "\nposx: " + x + "\nposy: " + y );
//        }

        function setCell(cell){
            var x = cell.getAttribute("posx");
            var y = cell.getAttribute("posy");
            matrixNodes[x][y]["active"] = 1;
            $(cell).append(waveBlock);
            //console.debug(matrixNodes[x][y]);
			matrixNodes[x][y]["OscID"] = addOsc(0);
            $(cell).find(".freq-slider").slider({
                slide: function(event,ui){
                    var target = $(event.target);
                    var sibs = target.siblings("input")[0];
					var newFreq = 2 * (ui.value*ui.value);
                    sibs.value = Math.floor(newFreq);
					var par = target.parent().parent().parent(); // @TODO: make good
					setFreq(par.attr("posx"),par.attr("posy"),newFreq);
                },
				step:0.1
            });
            $(cell).find(".freq-value").on("keypress",function(event){
                if(event.which == 13){
                    var target = $(event.target);
                    var par = target.parent().parent().parent(); // @TODO: make good
                    setFreq(par.attr("posx"),par.attr("posy"),parseInt(target[0].value));
                }
            });
            $(cell).find(".amp-slider").slider({
                slide: function(event,ui){
                    var target = $(event.target);
                    var sibs = target.siblings("input")[0];
					newMul = ui.value/100.0;
                    sibs.value = newMul;
					var par = target.parent().parent().parent(); // @TODO: make good
					setMul(par.attr("posx"),par.attr("posy"),newMul);
                },
				step:1
            });
            $(cell).find(".amp-value").on("keypress",function(event){
                if(event.which == 13){
                    var target = $(event.target);
                    var par = target.parent().parent().parent(); // @TODO: make good
                    var newMul = parseFloat(target[0].value);
                    if(newMul>1.0)
                        newMul = 1.0;
                    setMul(par.attr("posx"),par.attr("posy"),newMul);
                }
            });

        }

        function setFreq(x,y,freq){
			var id = matrixNodes[x][y]["OscID"];
            oscTable[id]["osc"].frequency.value = freq;
        }

		function setMul(x,y,newMul){
			var id = matrixNodes[x][y]["OscID"];
            oscTable[id]["mul"].gain.value = newMul;
		}

//        function getCell(x,y){
//            var row = $("#matrix tr").eq(y);
//            var cell =  row.children("td").eq(x);
//            if(cell == 0)
//                alert("Index not found");
//            return cell;
//        }

        function stopAll(){
            for(i=0;i<oscTable.length;i++){
                oscTable[i]["osc"].stop();
            }
        }


        $(function(){
           $(".slider").slider({
               slide: function( event, ui ){
                   $("#debugText").text("Level: " + ui.value);
               }
           });
        });


    </script>
</head>
<body>
    <div id="oscilloscope"></div>
    <div id="debugToolbar">
        <button onclick="stopAll()">STOP ALL</button>
    </div>
    <div id="zoomSlider"></div>
    <div id="debugText">empty</div>
    <div>
        <table id='matrix' >
        </table>
    </div>
<!--
        <div class='block-title'>
            No Name
        </div>
        <div class='block-freq'>
            <div class='current-value'>
                0
            </div>
            <div class='slider freq-slider'>
            </div>
        </div>
        <div class='block-type'>
            <div class='type-icon'>
                <svg></svg>
            </div>
        </div>
        <div class='block-amp'>
            <div class='current-value'>
                50
            </div>
            <div class='slider amp-slider'>
            </div>
        </div>
-->

    <script type="text/javascript">
        makeMatrix(matrixDef.width,matrixDef.height);
		matrixSize();
//        var sineWave = context.createOscillator();
//        sineWave.frequency.value = 300;
//        var sineWave2 = context.createOscillator();
//        sineWave2.frequency.value = 303;
//        var myOscilloscope = new WavyJones(context, 'oscilloscope');
//
//        var gain1 = context.createGain();
//        gain1.gain.value = 0.5;
//        var gain2 = context.createGain();
//        gain2.gain.value = 0.5;
//
//        sineWave.connect(gain1);
//        sineWave2.connect(gain1);
//        gain1.connect(myOscilloscope);
//        myOscilloscope.connect(context.destination);
//
//        sineWave.start(0);
//        sineWave2.start(0);
        oscilloscope = new WavyJones(context, 'oscilloscope');
        gainNode = context.createGain();
        gainNode.connect(oscilloscope);
        oscilloscope.connect(context.destination);


    </script>
</body>
</html>
